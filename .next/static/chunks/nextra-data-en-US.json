{"/":{"title":"Nextra","data":{"":"Make beautiful websites with Next.js & MDX.\n\n\nSimple, powerful and flexible site generation framework with everything you love from Next.js.\n\n\nGet started →\n\n\n\n\n\n\n\n\n\n\n\nFull-power documentation in minutes.\n\n\n\n\nLinks and images are always optimized.\n\n\nNextra automatically converts Markdown links and images to use Next.js Link and Next.js Image when possible. No slow navigation or layout shift.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced syntax highlighting solution.\n\n\nPerformant and reliable build-time syntax highlighting powered by Shiki.\n\n\n\nI18n as easy as creating new files.\n\n\nName your page files with locales suffixed, Nextra and Next.js will do the rest for you.\n\n\n\n\n\n\n\n\n\nMDX 2 lets you use Components inside Markdown, with huge performance boost since v1.\n\n\n\n\n\nDark mode included.\n\n\n\n\nFull-text search, zero-config needed.\n\n\nNextra indexes your content automatically at build-time and performs incredibly fast full-text search via FlexSearch.\n\n\n\n\n\n\n\n\n\n\nOrganize pages intuitively, with file-system routing from Next.js.\n\n\n\nA11y as a top priority.\n\n\nNextra respects system options such as Increase Contrast and Reduce Motion.\n\n\n\nHybrid rendering, next generation.\n\n\nYou can leverage the hybrid rendering power from Next.js with your Markdown content including SSG, SSR, and ISR.\n\n\n\nAnd more...\n\n\nSEO / RTL Layout / Plugable Themes / Built-in Components / Last Git Edit Time / Multi-Docs...A lot of new possibilities to be explored.\n\n\nStart using Nextra →"}},"/showcase":{"title":"Showcase","data":{"":"Showcase\n\nOpen source projects powered by Nextra"}},"/about":{"title":"About","data":{"":"Nextra was initially created by Vercel members Shu Ding and Paco Coursey in 2020. Since 2021, Yixuan Xu contributed tremendously to the project. In 2022, Dimitri Postolov from The Guild joined the core team to help with the development of 2.0.","team#Team":"Currently, the project is maintained by Shu Ding and Dimitri Postolov. You can check out the full list of contributors on GitHub.","credits#Credits":"Nextra is powered by these incredible open source projects:\nhttps://reactjs.org\nhttps://nextjs.org\nhttps://turbo.build\nhttps://mdxjs.com\nhttps://pnpm.io\nhttps://tailwindcss.com\nhttps://github.com/pacocoursey/next-themes\nhttps://github.com/garmeeh/next-seo\nhttps://github.com/shikijs/shiki\nhttps://github.com/nextapps-de/flexsearch\nhttps://github.com/atomiks/rehype-pretty-code\nhttps://github.com/Brooooooklyn/simple-git","design-assets#Design Assets":"Feel free to use the Nextra logo and other assets in your project. But please don't modify the logo, and don't use the logo to represent your project or product.\nName\tDescription\tPreview\tIcon\tUsefull for favicons, app icons, link icons, etc.\n\nLogo\tFull Nextra logo\n\nSocial Card\tThe Nextra social card","license#License":"The Nextra project and themes are licensed under the MIT license."}},"/docs/blog-theme":{"title":"Blog Theme","data":{"":"Docs for this theme is under construction."}},"/docs/custom-theme":{"title":"Custom Theme","data":{"":"Docs for custom themes is under construction."}},"/docs/docs-theme":{"title":"Docs Theme","data":{"":""}},"/docs":{"title":"Introduction","data":{"":"Nextra is a framework on top of Next.js, that lets you build content focused websites. It has all the great features from Next.js, plus extra power to create Markdown-based content with ease.","quick-start#Quick Start":"To start using Nextra, you need to select a theme first:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to use Nextra without a preset theme, or build your own theme, you can follow the Custom Theme docs."}},"/docs/guide":{"title":"Guide","data":{"":"The following features are configured via the Next.js configuration and are available in all themes."}},"/docs/blog-theme/start":{"title":"Get Started","data":{"":"Docs for this theme is under construction.\n\nAn example of the blog theme can be found here.\nSimilar to the Docs Theme, you can install the blog theme with the following commands:","quick-start-from-template#Quick Start from Template":"","start-as-new-project#Start as New Project":"","install#Install":"To create a Nextra Docs site manually, you have to install Next.js, React, Nextra, and Nextra Blog Theme. In your project directory, run the following command to install the dependencies:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you already have Next.js installed in your project, you only need to install nextra and nextra-theme-blog as the add-ons.","add-nextjs-config#Add Next.js Config":"Create the following next.config.js file in your project’s root directory:\n\nWith the above configuration, Nextra can handle Markdown files in your Next.js project, with the specified theme. Other Nextra configurations can be found in Guide.","create-blog-theme-config#Create Blog Theme Config":"Lastly, create the corresponding theme.config.jsx file in your project’s root directory. This will be used to configure the Nextra Blog theme:","ready-to-go#Ready to Go!":"Now, you can run the pnpm next command to start developing the project! 🎉"}},"/docs/docs-theme/built-ins":{"title":"Built-ins","data":{"":"The Docs Theme includes a couple of built-in components that you can use to better style your documentation:"}},"/docs/docs-theme/page-configuration":{"title":"Page Configuration","data":{"":"In Nextra, the site and page structure can be configured via the co-located _meta.json files. In the docs theme, there are some extra options available to customize it further.Those configurations affects the overall layout of the theme, espeically the navigation bar and the sidebar.\nRead more about Nextra's _meta.json files here.","pages#Pages":"The title and order of a page shown in the sidebar should be configured in the _meta.json file as key-value pairs. For example, if you have the following file structure:\n\n\n\n\n\n\n\n\n\n\n\nYou can define how the pages are shown in the sidebar via the _meta.json file:\n\n\nIf any routes are not listed in the _meta.json file, they will be appended to the end of the sidebar and sorted alphabetically, and the title will be formatted with Title.","folders#Folders":"Folders can be configured in the same way as pages. For example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe top-level _meta.json file contains the meta information for the top-level pages and folders:\n\nAnd the nested _meta.json file contains the meta information for pages in the same folder:\n\nThis way, information for pages are grouped together in directories. You can move directories around without having to change the _meta.json file.","folders-with-index-page#Folders with Index Page":"What if I want to have a folder with an index page? We can add a MDX page with the same name and in the same directory as the folder. Let's say we want to add /fruits route in the example above, we can create a fruits.mdx file in pages:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThen Nextra knows that the fruits key in _meta.json defines a folder with an index page. If you click that folder in the sidebar, it will open the folder and show you the fruits.mdx page at the same time.","external-links#External Links":"You can add external links to the sidebar by adding an item with href in _meta.json:\n\nTo always open the link in a new tab, enable the \"newWindow\": true option:\n\n\nYou can use this option to link to relative internal links too.","hidden-routes#Hidden Routes":"By default, all MDX routes in the filesystem will be shown on the sidebar. But you can hide a specific pages or folders by using the \"display\": \"hidden\" configuration:\n\nThe page will still be accessible via the /contact URL, but it will not be shown in the sidebar.","navbar-items#Navbar Items":"","sub-docs#Sub Docs":"By defining a top-level page or folder as \"type\": \"page\", it will be shown as a special page on the navigation bar, instead of the sidebar. With this feature, you can have multiple \"sub docs\", and special pages or links such as \"Contact Us\" that are always visible.For example, you can have 2 docs folders frameworks and fruits in your project:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn your top-level _meta.json file, you can set everything as a page, instead of a normal sidebar item:\n\nAnd it will look like this:\n\n\nLive example on StackBlitz ↗ (opens in a new tab)\nYou can also hide links like Home from the navbar with the \"display\": \"hidden\" option.","menus#Menus":"You can also add menus to the navbar using \"type\": \"menu\" and the \"items\" option:\n\n\nLive example on StackBlitz ↗ (opens in a new tab)","links#Links":"Same as the External Links option, you can have external links in the navbar too:","fallbacks#Fallbacks":"In the Sub Docs example above, we have to define the \"type\": \"page\" option for every page. To make it easier, you can use the \"*\" key to define the fallback configuration for all items in this folder:\n\nThey are equivalent where all items have \"type\": \"page\" set.","separators#Separators":"You can use a \"placeholder\" item with \"type\": \"separator\" to create a separator line between items in the sidebar:\n\n\nTogether with the sidebar.titleComponent theme option, you can customize the look of titles and separator lines in the sidebar.","advanced#Advanced":"","theme-components#Theme Components":"You can configure the theme for each page using the \"theme\" option. For example, you can disable or enable specific components for specific pages:\n\nThis option will be inherited by all child pages if set to a folder.","layouts#Layouts":"By default, each page has \"layout\": \"default\" in their theme config, which is the default behavior.","raw-layout#Raw Layout":"By default, Nextra renders the MDX content (such as h1, h2, h3 etc.) with themed components, inside a content container. You can use the \"raw\" layout to let Nextra to not inject any styles to the content:","full-layout#Full Layout":"You might want to render some page with the full container width and height, but keep all the other styles. You can use the \"full\" layout to do that:","typesetting#Typesetting":"The \"typesetting\" option controls typesetting details like font features, heading styles and components like li and code. There are \"default\" and \"article\" typesettings available in the docs theme.The default one is sutiable for most cases like documentation, but you can use the \"article\" typesetting to make it look like an elegant article page:\n\n\nLive example on StackBlitz ↗ (opens in a new tab)"}},"/docs/docs-theme/start":{"title":"Get Started","data":{"":"Nextra Docs Theme is a theme that includes almost everything you need to build a modern documentation website. It includes a top navigation bar, a search bar, a pages sidebar, a TOC sidebar, and other built-in components.This website itself is built with the Nextra Docs Theme.","quick-start-from-template#Quick Start from Template":"","deploy-to-vercel#Deploy to Vercel":"You can start by creating your own Nextra site and deploying to Vercel by clicking the link:\n\nVercel will fork the Nextra Docs template and deploy the site for you. Once done, every commit in the repository will be deployed automatically.","fork-the-template#Fork the Template":"You can also manually fork the template repository.","start-as-new-project#Start as New Project":"","install#Install":"To create a Nextra Docs site manually, you have to install Next.js, React, Nextra, and Nextra Docs Theme. In your project directory, run the following command to install the dependencies:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you already have Next.js installed in your project, you only need to install nextra and nextra-theme-docs as the add-ons.","add-nextjs-config#Add Next.js Config":"Create the following next.config.js file in your project’s root directory:\n\nWith the above configuration, Nextra can handle Markdown files in your Next.js project, with the specified theme. Other Nextra configurations can be found in Guide.","create-docs-theme-config#Create Docs Theme Config":"Lastly, create the corresponding theme.config.jsx file in your project’s root directory. This will be used to configure the Nextra Docs theme:\n\nFull theme configurations can be found here.","ready-to-go#Ready to Go!":"Now, you can create your first MDX page as pages/index.mdx:\n\nAnd run the pnpm next command to start developing the project! 🎉\nNext, check out the next section to learn about organizing the documentation structure and configuring the website theme:"}},"/docs/docs-theme/theme-configuration":{"title":"Theme Configuration","data":{"":"The theme is configured with the theme.config.jsx file. It should export an object that contains your configurations, for example:\n\nDetailed information for each option is listed below.","global#Global":"","docs-repository#Docs Repository":"Set the repository URL of the documentation. It’s used to generate the “Edit this page” link and the “Feedback” link.","specify-a-path#Specify a Path":"If the documentation is inside a monorepo, a subfolder, or a different branch of the repository, you can simply set the docsRepositoryBase to the root path of the pages/ folder of your docs. For example:\n\nThen Nextra will automatically generate the correct file path for all pages.","seo-options#SEO Options":"You can configure SEO related settings via the useNextSeoProps option. The useNextSeoProps function returns the props that will be passed to the Next SEO component.It is also a hook so you can use APIs like useRouter inside to return values conditionally.\n\nFor example, we can have all pages rendering the same suffix for <title>:\n\n\n\nThe %s is a placeholder that will be replaced by the page title.You can also return it conditionally to avoid adding the suffix to the homepage:","head-tags#Head Tags":"Configure the <head> tags of the website. You can add meta tags, title, favicon, etc.","static-head-tags#Static head tags":"If you have only static head tags, it’s easy to directly put them in head. For example:","dynamic-tags-based-on-page#Dynamic tags based on page":"You can also use a function component as head to dynamically generate the head tags based on the current page’s front matter. For example:\n\nYou can refer to the useConfig API section for more information about the useConfig hook and the frontMatter object.","dark-mode-and-themes#Dark Mode and Themes":"Customize the theme behavior of the website.","theme-color#Theme Color":"You can adjust the theme color of the website by setting a primary hue value to dark or light themes.\n\nTry it out for this website:","navbar#Navbar":"","logo#Logo":"The logo of the website rendered on the navbar. It can be a React node or a function component.\n\n\n\n\nLive example on StackBlitz ↗ (opens in a new tab)","project-link#Project Link":"Show a button that links to your project’s homepage on the navbar. By default, it links to Nextra’s GitHub repository.\n\nYou can configure project.link and project.icon to customize the project link, for example make it link to your GitLab repository:\n\n\n\nIf icon is missing, it will be a GitHub icon by default.","chat-link#Chat Link":"Show a button that links to your project’s forum or other social media on the navbar.\n\nYou can configure chat.link and chat.icon to customize the chat link, for example make it link to your Twitter account:\n\nIf icon is missing, it will be a Discord icon by default.","menu-and-custom-links#Menu and Custom Links":"Check out Page Configuration to learn how to add custom menus or links to the navbar.","search#Search":"","banner#Banner":"Show a dismissable banner on the top of the website. It can be used to show a warning or a notice.","banner-key#Banner key":"A banner can be dismissed. By default banner.key will be \"nextra-banner\" and it’s used by localStorage to keep the banner state (dismissed or not) on the client.If you have updated your banner content, you should change the key to make sure the banner is shown again. The best practice is to always use a descriptive key for the current content, for example:","customize-the-navbar#Customize the Navbar":"Customize the entire navbar component.","sidebar#Sidebar":"","menu-collapse-level#Menu Collapse Level":"By default, the sidebar menu is collapsed at level 2. You can change it by setting sidebar.defaultMenuCollapseLevel to a different number. For example, when set to 0, every folder will be collapsed by default and when set to Infinity, all nested folders will be expanded by default.","customize-sidebar-content#Customize sidebar content":"Together with the Separators item, you can customize how the sidebar content is rendered by using the sidebar.titleComponent option:\n\n\nLive example on StackBlitz ↗ (opens in a new tab)","content#Content":"","mdx-components#MDX Components":"Provide custom MDX components to render the content. For example, you can use a custom pre component to render code blocks.","writing-direction#Writing Direction":"The default writing direction of the website.","extra-content#Extra Content":"Render extra content at the end of the main area of the page. It can be used to render a comment section, a newsletter form, or any other type of content.","toc-sidebar#TOC Sidebar":"","table-of-contents#Table of Contents":"Show a table of contents on the right side of the page. It’s useful for navigating between headings.","floating-toc#Floating TOC":"toc.float is enabled by default. When enabled, the TOC will be displayed on the right side of the page and it will be sticky when scrolling. If it’s disabled, the TOC will be displayed directly on the page sidebar.","edit-link#Edit Link":"Show an “Edit this page” link on the page that points to the file URL on GitHub (or other places).","feedback-link#Feedback Link":"The built-in feedback link provides a way for users to submit feedback about the documentation. By default, it’s a link that points to the issue creation form of the docs repository, with the current website title prefilled: example.\n\nTo disable it, you can set feedback.content to undefined.","end-of-page#End of Page":"","navigation#Navigation":"Show previous and next page links on the bottom of the content. It’s useful for navigating between pages.\n\n\n\n\n\nThe above is also equivalent to navigation: true.","last-updated-date#Last Updated Date":"Show the last updated date of each page. It’s useful for showing the freshness of the content.","footer#Footer":"The footer area of the website. You can either specify some content for the default footer, or fully customize it with a custom component.","copyright-information#Copyright information":"You can add some simple content, such as copyright information to the default footer:","error-pages#Error Pages":"","404---not-found#404 - Not Found":"","500---internal-server-error#500 - Internal Server Error":"","favicon-glyph-experimental#Favicon Glyph (Experimental)":"This isn’t supported by all browsers, but it’s a nice way to customize the favicon of the website simply by using an emoji or character."}},"/docs/guide/i18n":{"title":"Next.js I18n","data":{"":"This feature is only available in the docs theme.\nNextra supports Next.js Internationalized Routing out of the box. This docs explains how to configure and use it.","add-i18n-config#Add I18n Config":"To add multi-language pages to your Nextra application, you need to config i18n in next.config.js first:","add-middleware#Add Middleware":"Then, you need to add a middleware.js file in the root of your project (related Next.js docs):\n\nIf you already have the middleware defined, you can do this instead:","use-add-locale-to-filenames#Use Add Locale to Filenames":"Then, add the locale codes to your file extensions (required for the default locale too):","configure-the-docs-theme#Configure the Docs Theme":"Finally, add the i18n option to your theme.config.jsx to configure the language dropdown:"}},"/docs/guide/image":{"title":"Next.js Image","data":{"":"The standard way to use Next.js Image inside MDX is to directly import the component:","static-image#Static Image":"You need to opt-in to this feature by enabling staticImage:\ntrue.\nNextra supports automatically optimizing your static image imports with the Markdown syntax. You do not need to specify the width and height of the image, just use the ![]() Markdown syntax:\n\nWith Next.js Image, there will be no layout shift, and a beautiful blury placeholder will be shown by default when loading the images:"}},"/docs/docs-theme/built-ins/tabs":{"title":"Tabs","data":{"":"A built-in tab component of the Docs Theme.","example#Example":"pNPM: Fast, disk space efficient package manager.\n\nnpm is a package manager for the JavaScript programming language.\n\nYarn is a software packaging system.","usage#Usage":"","default#Default":"","default-selected-index#Default Selected Index":"You can use the defaultIndex prop to set the default tab index:\n\nAnd you will have npm as the default tab:\n\npNPM: Fast, disk space efficient package manager.\n\nnpm is a package manager for the JavaScript programming language.\n\nYarn is a software packaging system."}},"/docs/docs-theme/built-ins/callout":{"title":"Callout","data":{"":"A built-in component of the Docs Theme to show important information to the reader.","example#Example":"A callout is a short piece of text intended to attract attention.\n\nA callout is a short piece of text intended to attract attention.\n\nA callout is a short piece of text intended to attract attention.\n\nA callout is a short piece of text intended to attract attention.","usage#Usage":"","default#Default":"Space Invaders is a 1978 shoot 'em up arcade game developed by Tomohiro\nNishikado.","info#Info":"Today is Friday.","warning#Warning":"This API will be deprecated soon.","error#Error":"This is a dangerous feature that can cause everything to explode.","api#API":"The Callout component takes the following props:","type-optional#type (optional)":"The type of the Callout.\nType: 'default' | 'info' | 'warning' | 'error'\nDefault: 'default'","emoji-optional#emoji (optional)":"The icon to show in the Callout. You can also show your custom icon using this prop.\nType: ReactNode\nDefault: '💡'","children-optional#children (optional)":"The content of the Callout.\nType: ReactNode\nDefault: null"}},"/docs/guide/organize-files":{"title":"Organize Files","data":{"":"Nextra first collects all your Markdown files and configurations from the pages directory, and then generates the “page map information” of your entire site, to render things such as the navigation bar and sidebar below:\n\n\n\n\n\nExample: Nextra Docs Theme has sidebar and navbar\ngenerated automatically from Markdown files.","default-behavior#Default Behavior":"By default, the page map contains all .md and .mdx filenames and the directory structure, sorted alphabetically.\nThen, Nextra will use the title package to get formatted page names from filenames.For example if you have the following structure:\n\nThe resolved page map will be (note that all names were sorted alphabetically):\n\nAnd the global page map will be bundled to each page by Nextra. Then, configured theme will render the actual UI with that page map.","_metajson#_meta.json":"It’s very common to customize each page’s title, rather than just using the filename. For example it doesn’t make sense to have a page titled “Index”, but instead have a page titled “Home”.That’s where _meta.json comes in. You can have an _meta.json file in each directory, and it will be used to override the default configuration of each page:\n\nAnd you can put this in your pages/_meta.json file:\n\nIt tells Nextra the order of each page, and the correct title. Alternatively, you can do it with title and have other configurations in there as well:\n\nThe extra configurations are passed to the theme as additional information. Check the corresponding pages for more information:"}},"/docs/guide/typescript":{"title":"TypeScript","data":{"":"This page is a stub. Help us expand it by contributing!"}},"/docs/guide/syntax-highlighting":{"title":"Syntax Highlighting","data":{"":"Nextra uses Shiki to do syntax highlighting at build time. It’s very reliable and performant. For example, adding this in your Markdown file:\n\nAnd it renders:","features#Features":"","inlined-code#Inlined Code":"Inlined syntax highlighting like let x = 1{:jsx} is also supported via the {:} syntax:","highlighting-lines#Highlighting Lines":"You can highlight specific lines of code by adding a {} attribute to the code block:\n\nResult:","highlighting-substrings#Highlighting Substrings":"You can highlight specific substrings of code by adding a // attribute to the code block:\n\n\n\nYou can highlight only a part of the occurrences of that substring by adding a number it: /str/1, or multiple: /str/1-3, /str/1,3.","copy-button#Copy Button":"By adding a copy attribute, a copy button will be added to the code block when the user hovers over it:\n\nRenders:\n\nYou can enable this feature globally by setting defaultShowCopyCode: true in your Nextra configuration (next.config.js file). Once it's enabled globally, you can disable it via the copy=false attribute.","line-numbers#Line Numbers":"You can add line numbers to your code blocks by adding a showLineNumbers attribute:\n\nRenders:","supported-languages#Supported Languages":"Check this list for all supported languages.","customize-the-theme#Customize The Theme":"Nextra uses CSS variables to define the colors for tokens. You can inject a global CSS to customize them under light/dark themes. For example this is the default tokens and you can override any of these:"}},"/docs/guide/ssg":{"title":"Next.js SSG","data":{"":"With Next.js, you can pre-render your page using Static Generation (SSG). Your pages will be generated at build time and statically served to visitors. It can also be cached by a CDN to maximize the performance.This is supported by Nextra too. Here's an example:\nNextra has  stars on GitHub!\nThe number above was generated at build time via getStaticProps. With Incremental Static Regeneration enabled, it will be kept up to date.Here's the MDX code for the example above:"}},"/docs/guide/markdown":{"title":"Markdown","data":{"":"","mdx#MDX":"With Nextra, all your .mdx files under the pages directory will be rendered with MDX, it's an\nadvanced Markdown format with React component support.For example, you can use import and use React components inside your Markdown files like this:\n\nGenerates:\n\n\nHello MDX\n\n\nClicks:\n\n\nBesides basic MDX, Nextra also has some advanced Markdown features built-in.","github-flavored-markdown#GitHub Flavored Markdown":"GFM is an extension of Markdown, created by GitHub, that adds support for strikethrough, task lists, tables, and more.","strikethrough#Strikethrough":"removed","task-list#Task List":"Write the press release\nUpdate the website\nContact the media","table#Table":"Syntax\tDescription\tTest Text\tHeader\tTitle\tHere's this\tParagraph\tText\tAnd more\tStrikethrough\t\tText","autolinks#Autolinks":"Visit https://nextjs.org.","extended-syntax-highlighting#Extended Syntax Highlighting":"Check out the Syntax Highlighting section for more information:"}},"/docs/guide/advanced":{"title":"Advanced","data":{"":""}},"/docs/guide/link":{"title":"Next.js Link","data":{"":"All relative Markdown links are automatically converted to Next.js links. This means that the target page will be prefetched. And when you click on a link, the page will be loaded on the client-side like a SPA, without making a full page load. For example:\n\nWill be equivalent to:\n\nThis feature makes navigation between Nextra pages fast and seamless."}},"/docs/guide/advanced/table":{"title":"Rendering Tables","data":{"":"","gfm-syntax#GFM syntax":"In markdown is preferable write table via GFM syntax.\n\nwill be rendered as:\nleft\tcenter\tright\tfoo\tbar\tbaz\tbanana\tapple\tkiwi","html-literal-tables#HTML Literal Tables":"If you'll try render the following literal <table />{:jsx} element:\n\nyou'll get the following result:\n\n\n\nleft\n\n\ncenter\n\n\nright\n\n\n\n\n\nfoo\n\n\nbar\n\n\nbaz\n\n\n\nbanana\n\n\napple\n\n\nkiwi\n\n\n\n\nConfused by unstyled elements? We explained here, why it's happens.","dynamic-tables#Dynamic Tables":"","how-to-write#How to Write":"Want to render dynamic table? You can use embeded JavaScript expressions into your table for it:\n\nwill be rendered as:\n\n\n\nCountry\n\n\nFlag\n\n\n\n\n\n\nConfused by unstyled elements? We explain below 👇, why it's happens.","unexpected-result#Unexpected Result":"Table looks different compared to GFM syntax table:\nonly children of table body <tbody />{:jsx} is styled\ntable header is unstyled\ntable doesn't have margin top","why-this-happens#Why This Happens":"MDX2 doesn't replace literal HTML elements with <MDXProvider />{:jsx}.Adam Wathan, creator of Tailwind CSS submitted an issue in MDX2 to have some\nan escape hatch that we can name like:\nplease only transform markdown tags, not literal HTML tags\nTable header looks unstyled since not replaced with Nextra's MDX components <tr />{:jsx}, <th />{:jsx} and <td />{:jsx},\nfor the same reason <table />{:jsx} literal is not replaced and doesn't have default margin-top aka mt-6.","ways-to-fix-it#Ways to Fix It":"","one-time-fix#One-Time Fix":"Just wrap your table with curly braces { and }, e.g.","changing-default-behaviour#Changing Default Behaviour":"If this thing is still confusing for you, and you want to use regular literal HTML elements for your tables, do the following:\nInstall remark-mdx-disable-explicit-jsx package\n\n\n\n\nSetup plugin in nextra function inside next.config.mjs file"}},"/docs/guide/advanced/remote":{"title":"Remote Content","data":{"":"This page is a stub. Help us expand it by contributing!"}}}